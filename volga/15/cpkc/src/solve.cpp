#include <opa_common.h>
#include <plll.hpp>
#include <opa/math/common/bignum.h>
#include <plll/arithmetic-nint.hpp>

using namespace opa::math::common;
using namespace std;

void printShortestVector(
    const plll::linalg::math_matrix<plll::arithmetic::Integer> &A,
    unsigned index, const plll::arithmetic::Integer &sqnorm) {
    cout<<"BEST >> \n"<<A(0,0)<<endl<<A(0,1)<<endl<<A(0,2)<<endl<<endl;
}

void printShortestVector_LI(
    const plll::linalg::math_matrix<plll::arithmetic::NInt<long> > &A,
    unsigned index, const plll::arithmetic::NInt<long> &sqnorm) {
    std::cout << "The currently shortest vector is " << A.row(index)
              << " with squared norm " << sqnorm << " (NInt<long>)\n";
}
plll::arithmetic::Integer toplll(const bignum &x) {
    return plll::arithmetic::convert<plll::arithmetic::Integer>(x.str(10));
}

bignum fromplll(const plll::arithmetic::Integer &x) {
    std::string res=plll::arithmetic::convert(x, plll::arithmetic::HexStringContext());
    return bignum(res,16);
}

int main() {
    bignum q = bignum::fromstr(
        "3367265882837954210676304584431797098138381997768098211335928125206172"
        "2477633860419027289480505664953721088809844452034093021104877537916822"
        "5053990416813397700471363286548308289791446247180963024302334801892896"
        "7801312666051757350142719434257370449813068201063039966064615983650746"
        "7161397960938237074784211702912226366597162537480055824818927592230736"
        "0660157021531540917766073813580537200247705978210994813660578485778007"
        "3311161785331818481358922812819440181220099800258086113952782561140979"
        "4790513984707396661201740133549704588458774330057745231685280681366183"
        "5591698382317465847104091632127053135737201601015767400414966718832797"
        "1975759424093154273384340032849457706953236075899507918002653153590766"
        "4088828027613692829368378189617686917154399563505116506772565943712538"
        "5421754990489252254890896680169608528306949313140032657223599442127776"
        "7142037167603121524630439535985176679244281151395412722052552957876796"
        "813181134529373",
        10);

    bignum h = bignum::fromstr(
        "1136442024267523825013847851112107799614139727041101917089257725339218"
        "9623717098266013621677880053446496841181075832013527768995483827594263"
        "2264394641476658219838653376210121761875282530562633981070990288821310"
        "1632726650051820937039250027089444815624542124520739159523088706626107"
        "4260136796471186878501185020462939289514926699722313363743186443756213"
        "6495965310914423743178734511161317122012077767104097044970324858791498"
        "9552930014207209875104038105455091994702342333557552051008503570350202"
        "5590483287848629052476797046715365617090343348883224133879177624839017"
        "4272219145447003400193736307270502130084398074261991516781297525882873"
        "0471075365894844356963082095631177537249712390044118001119056289517463"
        "7415976288675716062650615642090548777129441464242554640768852557548693"
        "9567669117012574879123996059233105800841125114991040644899092311714996"
        "4806771577053050903627516711991688111864202279639456142611545855798445"
        "830617308857332",
        10);

    bignum cipher = bignum::fromstr(
        "1769521037545646686008240906441722107166557640118331052983459113107875"
        "8205937776790586049945709816053561804269363955234034818482353471155251"
        "8016606194626575950701341722454982121330003403207186735068883871012610"
        "7042163462836810962548529427176444812894960125608806396775824650185757"
        "8663472374668902584829133385488750844703534780634087757944923540516085"
        "9129496691719480567473725854947322057261802891519377198340784978112301"
        "5055638491356053484853254294212448203665853162637322460633584544803318"
        "6374930049703288920659120709852957609228810428406466800651517854112368"
        "2894654410580556825181424490866593418108783879269614695457409123384295"
        "6658304462759628300695688668639060628822502457536360284407599409110833"
        "0330531737016295082419686656602445563576109457485039616103229084785713"
        "9978577584603957515881345594622756757964778677281186290642804934911142"
        "8815789974294532274854752146295419775902552093699675224496702843125129"
        "511524014129242",
        10);

    bignum ih = h.inv(q);
    bignum x = cipher * ih % q;
    x.disp(10);

    plll::linalg::math_matrix<plll::arithmetic::Integer> A;
    bignum tmp=q.sqrt();
    A.resize(3, 3);
    A(0, 0) = toplll(ih);
    A(0, 1) = toplll(tmp);
    A(1, 0) = toplll(x);
    A(1, 2) = toplll(tmp);
    A(2, 0) = toplll(q);
    A(2, 1) = toplll(0);

    plll::LatticeReduction lr;
    lr.setLattice(A);
    lr.setMinCallbackFunction(printShortestVector, printShortestVector_LI);
    lr.bkz(0.99, 40);
    A=lr.getLattice();
    puts("END >>>");
    cout<<"BEST >> \n"<<A(0,0)<<endl<<A(0,1)<<endl<<A(0,2)<<endl<<endl;
    cout<<-fromplll(A(0,1))/tmp<<endl;

    q.sqrt().disp(10);
    //KAPPA SIHT :)))
    //b'{short_vector_is_sometimes_easy_to_find}'

}
