#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <algorithm>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <cstdlib>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <climits>
//#include <ext/hash_map>
#include <unistd.h>

using namespace std;
using namespace __gnu_cxx;

#define REP(i, n) for (int i = 0; i < int(n); ++i)
#define REPV(i, n) for (int i = (n)-1; (int)i >= 0; --i)
#define FOR(i, a, b) for (int i = (int)(a); i < (int)(b); ++i)

#define FE(i, t) \
    for (__typeof((t).begin()) i = (t).begin(); i != (t).end(); ++i)
#define FEV(i, t) \
    for (__typeof((t).rbegin()) i = (t).rbegin(); i != (t).rend(); ++i)

#define two(x) (1LL << (x))
#define ALL(a) (a).begin(), (a).end()

#define pb push_back
#define ST first
#define ND second
#define MP(x, y) make_pair(x, y)

typedef long long ll;
typedef unsigned long long ull;
typedef unsigned int uint;
typedef pair<int, int> pii;
typedef vector<int> vi;
typedef vector<string> vs;
typedef signed char s8;
typedef unsigned char u8;
typedef signed short s16;
typedef unsigned short u16;
typedef signed int s32;
typedef unsigned int u32;
typedef signed long long s64;
typedef unsigned long long u64;

template <class T>
void checkmin(T &a, T b) {
    if (b < a) a = b;
}
template <class T>
void checkmax(T &a, T b) {
    if (b > a) a = b;
}
template <class T>
void out(T t[], int n) {
    REP(i, n) cout << t[i] << " ";
    cout << endl;
}
template <class T>
void out(vector<T> t, int n = -1) {
    for (int i = 0; i < (n == -1 ? t.size() : n); ++i) cout << t[i] << " ";
    cout << endl;
}
inline int count_bit(int n) {
    return (n == 0) ? 0 : 1 + count_bit(n & (n - 1));
}
inline int low_bit(int n) { return (n ^ n - 1) & n; }
inline int ctz(int n) { return (n == 0 ? -1 : ctz(n >> 1) + 1); }
int toInt(string s) {
    int a;
    istringstream(s) >> a;
    return a;
}
string toStr(int a) {
    ostringstream os;
    os << a;
    return os.str();
}

void dispmem(const u64 *ptr, int sz) {
    printf("%016p >> ", ptr - 2);
    for (int i = -2; i < sz; ++i) printf("%016Lx ", ptr[i]);
    puts("");
}

void test1(){
    execv((const char*)1,(char *const*)2);

    u64 buf[200];
    malloc(0x1000);
    u64 *x=(u64*)malloc(0x200);
    u64 *z=(u64*)malloc(0x200);
    printf(">> FREE\n");
    free(x);
    //in big chunk
    printf(">> %Lx %Lx %Lx %Lx\n", x[0], x[1], x[2], x[3]);
    printf(">> %Lx %Lx %Lx %Lx\n", x[0], x[1], x[2], x[3]);
    int pos=5;
    u64 ptr=(u64)(buf[pos]);
    buf[pos+3]=(u64)&buf[113];
    buf[pos+1]=0x110;
    x[1]=(u64)(buf+pos);
    printf("INJECT AT %Lx, BUF: %p\n", x[1]);
    buf[1]=0x110;
    u64* tmp=(u64*)malloc(0x100);
    printf(">> get %p, buf=%p\n", tmp, buf);


    exit(0);
}

void test2(){
    char *const tb[]={"abc", NULL};
    execv("/tmp/test.bin", tb);
    void *x=malloc(160);
    void *y=malloc(300);
    free(x);
    malloc(100);
    malloc(100);


    exit(0);
}


int main() {
    test2();

    test1();
    int n = 10;
    void **tb[n];
    REP(i, n - 1) tb[i] = (void **)calloc(1, 0x120);
    tb[n-1] = (void **)malloc(0x400);
    REP(i, n) printf("%d >> %p\n", i, tb[i] - 2);

    free(tb[1]);
    //free(tb[9]);
    //free(tb[3]);
    void *tmp = malloc(0x1000);
    //void *tmp2 = malloc(0x1000);
    REP(j, n) dispmem((const u64 *)tb[j], 4);
    puts("");
    puts("GOOOT");
    printf(">>>%d<<<\n", ((const s64*)(tb[1]))[2]);
    dispmem((u64 *)(*(u64 *)(tb[1])), 4);
    puts("====");
    REP(j, n) dispmem((const u64 *)tb[j], 4);
    puts("");
    return 0;
}
