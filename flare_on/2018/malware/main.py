#!/usr/bin/env python

from chdrft.cmds import CmdsList
from chdrft.main import app
from chdrft.utils.cmdify import ActionHandler
from chdrft.utils.misc import Attributize
import chdrft.utils.misc as cmisc
import glog
import json
import struct
import binascii

global flags, cache
flags = None
cache = None


def args(parser):
  clist = CmdsList().add(test).add(extract_conn).add(try_packetize).add(search).add(extract_smb)
  ActionHandler.Prepare(parser, clist.lst)
  parser.add_argument('--file')
  parser.add_argument('--ofile')


def test(ctx):
  import scapy.all as scapy
  x = scapy.rdpcap(ctx.file)
  res = []
  sum = 0
  seen = set()
  for packet in x:
    if not scapy.DNS in packet:
      continue

    dns=packet[scapy.DNS]
    if not scapy.DNSRR in dns: continue
    rr = data=dns[scapy.DNSRR]
    if not rr.rrname.endswith(b'sadf.notatallsuspicio.us.'): continue
    dx = rr.rdata.decode()
    if rr.rrname in seen: continue
    seen.add(rr.rrname)
    sum += len(dx)
    print(rr.rrname, hex(sum), dx)
    res.append(dx)
    if len(dx) < 0xff: break

  print(hex(len(''.join(res))))
  json.dump(res, open(f'./{ctx.file}.json', 'w'))


def extract_conn(ctx):
  import scapy.all as scapy
  x = scapy.rdpcap(ctx.file)
  res = []
  sum = 0

  data = cmisc.defaultdict(list)
  seen_seq = set()
  for i, packet in enumerate(x):
    if not scapy.TCP in packet:
      continue


    tcp=packet[scapy.TCP]
    ip=packet[scapy.IP]

    payload = tcp.payload
    if len(payload) == 0: continue
    curid = (ip.src, ip.dst, tcp.seq)
    if curid in seen_seq: continue
    seen_seq.add(curid)

    data[(ip.src, ip.dst)].append((i, payload))


  ctrl_addr = '52.0.104.200'
  victim_addr = '192.168.221.91'

  ctrl_to_victim = bytes()
  for e in data[(ctrl_addr, victim_addr)]:
    ctrl_to_victim += bytes(e[1])
    print('c2v', hex(len(e[1])))

  victim_to_ctrl = bytes()
  for e in data[(victim_addr, ctrl_addr)]:
    victim_to_ctrl += bytes(e[1])
    print('v2c', hex(len(e[1])))

  import pickle
  pickle.dump(dict(v2c=victim_to_ctrl, c2v=ctrl_to_victim), open('./tranfser.data.pickle', 'wb'), protocol=2)


def try_packetize(ctx):
  import pickle
  data = pickle.load(open(ctx.file, 'rb'))
  import io

  res = {}

  for typ in ('c2v', 'v2c'):
    f = io.BytesIO(data[typ])
    key = f.read(0x30)

    dx = {}
    dx['key'] = key
    packets = []
    i = 0
    while True:
      x = f.read(0x4)
      if len(x) ==0: break
      n = struct.unpack('<H', x[:2])[0]
      px = f.read(n-4)
      print(typ, i, n, len(px), x[:4])
      assert len(px) == n-4
      packets.append((n, x+px))
      i+= 1
    dx['packets'] = packets
    res[typ] = dx

  pickle.dump(res, open(ctx.ofile, 'wb'), protocol=2)

def extract_smb(ctx):
  import scapy.all as scapy
  x = scapy.rdpcap(ctx.file)
  res = []
  sum = 0

  data = cmisc.defaultdict(list)
  seen_seq = set()
  for i, packet in enumerate(x):
    if not scapy.TCP in packet:
      continue


    tcp=packet[scapy.TCP]
    ip=packet[scapy.IP]

    payload = tcp.payload
    if len(payload) == 0: continue
    curid = (ip.src, ip.dst, tcp.seq)
    if curid in seen_seq: continue
    seen_seq.add(curid)

    data[(ip.src, ip.dst)].append((i, payload))


  ctrl_addr = '192.168.221.105'
  victim_addr = '192.168.221.91'

  ctrl_to_victim = bytes()
  for e in data[(ctrl_addr, victim_addr)]:
    ctrl_to_victim += bytes(e[1])
    print('c2v', hex(len(e[1])))

  victim_to_ctrl = bytes()
  for e in data[(victim_addr, ctrl_addr)]:
    victim_to_ctrl += bytes(e[1])
    print('v2c', hex(len(e[1])))

  import pickle
  pickle.dump(dict(v2c=victim_to_ctrl, c2v=ctrl_to_victim), open(ctx.ofile, 'wb'), protocol=2)




def search(ctx):
  import glob
  for fname in glob.glob('./output/conn2.packets.pickle_data*.out'):
    content = open(fname, 'rb').read()
    if content.find(binascii.unhexlify('504b')) != -1:
      print(fname)

def main():
  ctx = Attributize()
  ActionHandler.Run(ctx)


app()
